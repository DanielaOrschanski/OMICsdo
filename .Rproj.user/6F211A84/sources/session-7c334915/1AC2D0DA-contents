#' @title RunFastQC
#' @description Executes the FastQC for R1 and R2.
#' @param patent_dir Path of the directory that contains R1 and R2 fastq files. It can be either the "trimmed" folder or the original folder.
#' @import stringr
#' @import viridis
#' @import reshape2
#' @import ggplot2
unFastQC <- function(patient_dir) {

  FastQC <- downloadFastQC()
  file_list <- list.files(patient_dir)

  #Para que se pueda poner como entrada la carpeta de los trimmeados o la carpeta original:
  if  (basename(patient_dir) == "trimmed") {
    fileR1 <- paste0(patient_dir, "/", file_list[endsWith(file_list, "val_1.fq.gz")], sep="")
    fileR2 <- paste0(patient_dir, "/", file_list[endsWith(file_list, "val_2.fq.gz")], sep="")
  } else {
    fileR1 <- paste0(patient_dir, "/", file_list[endsWith(file_list, "R1.fastq.gz")], sep="")
    fileR2 <- paste0(patient_dir, "/", file_list[endsWith(file_list, "R2.fastq.gz")], sep="")
  }

  if ((length(nchar(fileR1)) == 0) | (length(nchar(fileR2)) == 0)) {
    stop("There are no fastq files in this directory")
  }

  #Evita repetir el analisis si ya fue hecho
  if (!(length(nchar(file_list[endsWith(file_list, "R1_fastqc")])) == 0)) {
    message("The FastQC for this sample has already been done.")
    return(paste0(patient_dir, "/", file_list[endsWith(file_list, "R1_fastqc")], sep=""))
  }


  #Ejecuta el FastQC R1
  system2(FastQC, fileR1)
  file_list <- list.files(patient_dir)

  #Extrae el zip R1
  file_fastqc_zip <- paste0(patient_dir, "/", file_list[endsWith(file_list, "R1_fastqc.zip")], sep="")
  unzip(file_fastqc_zip, exdir = patient_dir)

  #Ejecuta el FastQC R2
  system2(FastQC, fileR2)
  file_list <- list.files(patient_dir)

  #Extrae el zip R2
  file_fastqc_zip <- paste0(patient_dir, "/", file_list[endsWith(file_list, "R2_fastqc.zip")], sep="")
  unzip(file_fastqc_zip, exdir = patient_dir)

}

#' @title plotFastQC_PBSQ
#' @description generates the principal plot ("Per Base Sequence Quality") which compares the quality for all the samples.
#' @param patients_dir Path of the directory that contains one folder with fastq files (R1 and R2) of each patient.

plotFastQC_PBSQ <- function(patients_dir) {

  #Separación de los modulos del fastqc para generar graficos
  dir_list <- list.files(patients_dir)
  cant_patients <- length(dir_list)

  list_modulo_PBSQ <- list() #Va a almacenar los dataframes para el grafico Per Base Sequence Quality

  #Recorro cada paciente para guardar las tablas para el grafico y sacar el promedio de las medias.
  for (p in 1:cant_patients) {
    file_list <- list.files(sprintf("%s/%s", patients_dir, dir_list[p]))

    dir_fastqc_R1 <- paste0(patients_dir, "/", dir_list[p],"/", file_list[endsWith(file_list, "R1_fastqc")], sep="")

    if( length(nchar(dir_fastqc_R1)) == 0 ){ stop("There is no fastQC file.")}
    print(basename(dir_fastqc_R1))

    report_R1 <- read_file(paste0(dir_fastqc_R1, "/fastqc_data.txt", sep=""))
    module_R1 <- str_split(report_R1, ">>")

    dir_fastqc_R2 <- paste0(patients_dir, "/", dir_list[p],"/", file_list[endsWith(file_list, "R2_fastqc")], sep="")
    print(basename(dir_fastqc_R2))
    report_R2 <- read_file(paste0(dir_fastqc_R2, "/fastqc_data.txt", sep=""))
    module_R2 <- str_split(report_R2, ">>")

    #Plot principal:
    Per_base_sequence_quality_R1 <- create_FQCdata(module_R1[[1]][4])
    order_fact <- Per_base_sequence_quality_R1$Base
    Per_base_sequence_quality_R1$Base <- factor(Per_base_sequence_quality_R1$Base, levels = order_fact)

    Per_base_sequence_quality_R2 <- create_FQCdata(module_R2[[1]][4])
    order_fact <- Per_base_sequence_quality_R2$Base
    Per_base_sequence_quality_R2$Base <- factor(Per_base_sequence_quality_R2$Base, levels = order_fact)

    #promedio la mean de R1 y R2 para poder tener una sola línea por cada paciente
    Per_base_sequence_quality <- Per_base_sequence_quality_R1
    Per_base_sequence_quality$Mean <- ((Per_base_sequence_quality_R1$Mean + Per_base_sequence_quality_R2$Mean) / 2)

    list_modulo_PBSQ[[p]] <- Per_base_sequence_quality
    message(sprintf("The module of patient number %s for PBSQ graph has been loaded", p))

  }

  #Ploteo una linea por paciente superpuestas en un mismo grafico -----------------
    #Base del plot
  plot <- ggplot(Per_base_sequence_quality, aes(x = Base, y = Mean)) +
    #geom_boxplot(width = 0.5, fill = "black", color = "black") +
    geom_point(aes(y = Median), color = "yellow", size = 1, position = position_dodge(width = 0.75)) +
    geom_errorbar(
      aes(ymin = `Lower Quartile`, ymax = `Upper Quartile`),
      width = 0.2,
      position = position_dodge(width = 0.75),
      color = "black"
    ) +
    #geom_linerange(
    #  aes(ymin = `10th Percentile`, ymax = `90th Percentile`),
    #  position = position_dodge(width = 0.75),
    #  color = "black"
    #) +
    #geom_line(aes(y = Mean, group = 1), position = position_dodge(width = 0.75), color = colores[1], size = 1) +
    geom_hline(yintercept = 28, linetype = "dashed", color = "green", size = 0.5) +  # Add horizontal lines
    geom_hline(yintercept = 20, linetype = "dashed", color = "red", size = 0.5) +  # Add horizontal lines
    labs(title = "Per Base Sequence Quality",
         x = "Position in read (Base)",
         y = "Values") +
    theme_minimal() +
    theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +  # Rotate x-axis labels
    scale_y_continuous(breaks = seq(0, 40, by = 2))+
    coord_cartesian(ylim = c(0, 41))  # Set y-axis limits

  #Genera un dataframe para poder agregar una linea por cada paciente:
  combined_dataframe <- do.call(cbind, lapply(seq_along(list_modulo_PBSQ), function(i) {
    df <- list_modulo_PBSQ[[i]]
    names(df) <- paste(names(df), "_", dir_list[i], sep = "_")
    df
  }))

  selected_columns <- combined_dataframe[, grepl("^Mean", names(combined_dataframe))]
  selected_columns$Base <-combined_dataframe[,1]
  df.long <- melt(selected_columns,id.vars="Base")

  # Crea el gráfico completo con una linea por paciente:
  plot2 <- plot +
    geom_line(data = df.long, aes(x = Base, y = value, color = variable, group = variable), size = 1) +
    labs(title = "Per Base Sequence Quality - 1 curva por paciente", x = "Base", y = "Quality Value")

  print(plot2)

}



create_FQCdata <- function(dat){
  DBname <- read_lines(dat)
  len <- length(DBname)
  DBname <- DBname[2:len]
  DBname <- read.table(text = DBname, sep = "\t")
  colnames(DBname) <- strsplit(read_lines(dat)[2],"\t", fixed=TRUE)[[1]]
  colnames(DBname)[1] <- str_replace(colnames(DBname)[1], "#", "")
  return(DBname)
}




#INFO PARA AGREGAR LAS OTRAS GRAFICAS --------------------------------------------------------------------

#NO SE COMO GRAFICAR
Per_tile_sequence_quality <- create_FQCdata(module[[1]][6])

#----------------------------------------------------
Per_base_sequence_content <- create_FQCdata(module[[1]][8])

Per_base_sequence_content$Quality <- factor(Per_base_sequence_content$Quality)

#Per sequence quality scores:
ggplot(Per_base_sequence_content, aes(x = Quality, y = Count)) +
  geom_line(group = 1, color = "purple", size = 1.5) +
  labs(title = "Per Sequence Quality Scores",
       x = "Quality",
       y = "Count")

#-----------------------------------------------------------------------------
#Per base sequence content
Per_base_sequence_content <- create_FQCdata(module[[1]][10])

order_fact <- Per_base_sequence_content$Base
Per_base_sequence_content$Base <- factor(Per_base_sequence_content$Base, levels = order_fact)
ggplot(Per_base_sequence_content, aes(x = Base, y = G)) +
  geom_line(group = 1, color = "yellow", size = 1) +
  geom_line(aes(y = C), group = 1, color = "blue", size = 1) +
  geom_line(aes(y = `T`), group = 1, color = "purple", size = 1) +
  geom_line(aes(y = A), group = 1, color = "green", size = 1) +
  labs(title = "Per base sequence content",
       x = "Base",
       y = "Values") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +  # Rotate x-axis labels
  #coord_cartesian(ylim = c(0, 100))  # Set y-axis limits
  scale_y_continuous(breaks = seq(0, 100, by = 10))

#-----------------------------------------------
Per_sequence_GC_content <- create_FQCdata(module[[1]][12])

ggplot(Per_sequence_GC_content, aes(x = `GC Content`, y = Count)) +
  geom_line(group = 1, color = "purple", size = 1) +
  labs(title = "Per Sequence GC Content",
       x = "GC Content",
       y = "Count")+
  scale_y_continuous(breaks = seq(0, 1500000, by = 200000))+
  scale_x_continuous(breaks = seq(0, 100, by = 5)) +

  # Agregar la curva normal
  stat_function(fun = function(x) dnorm(x, mean = mean(Per_sequence_GC_content$`GC Content`), sd = sd(Per_sequence_GC_content$`GC Content`)),
                color = "blue", size = 1, linetype = "dashed")



#--------------------------------------------------------

Per_base_N_content <- create_FQCdata(module[[1]][14])

order_fact <- Per_base_N_content$Base
Per_base_N_content$Base <- factor(Per_base_N_content$Base, levels = order_fact)
ggplot(Per_base_N_content, aes(x = Base, y = `N-Count`)) +
  geom_line(group = 1, color = "purple", size = 1.5)+
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +  # Rotate x-axis labels
  coord_cartesian(ylim = c(0, 100)) + # Set y-axis limits
  labs(title = "Per base N content",
       x = "Base",
       y = "N - Count")

#--------------------------------------------------------------------------------

Sequence_Length_Distribution <- create_FQCdata(module[[1]][16])


#-------------------------------------------------------

Adapter_Content <- create_FQCdata(module[[1]][22])
Kmer_content <- create_FQCdata(module[[1]][22])

order_fact <- Adapter_Content$Position
Adapter_Content$Position <- factor(Adapter_Content$Position, levels = order_fact)
ggplot(Adapter_Content, aes(x = Position, y = `Illumina Universal Adapter`)) +
  #geom_line(group = 1, color = "red", size = 1) +
  geom_line(aes(y = `Illumina Universal Adapter`), group = 1, color = "purple", size = 1) +
  geom_line(aes(y = `Illumina Small RNA 3' Adapter`), group = 1, color = "blue", size = 1) +
  geom_line(aes(y = `Illumina Small RNA 5' Adapter`), group = 1, color = "green", size = 1) +
  geom_line(aes(y = `Nextera Transposase Sequence`), group = 1, color = "yellow", size = 1) +
  geom_line(aes(y = `PolyA`), group = 1, color = "lightblue", size = 1) +
  geom_line(aes(y = `PolyG`), group = 1, color = "pink", size = 1) +
  labs(title = "Adapter Content",
       x = "Position in read (pb)",
       y = "% adapter") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +  # Rotate x-axis labels
  #coord_cartesian(ylim = c(0, 100))  # Set y-axis limits
  scale_y_continuous(breaks = seq(0, 100, by = 10))

