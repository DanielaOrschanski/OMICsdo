#' @title RNAseqP
#' @description Executes the
#' @param patient_dir Path of the directory that contains R1 and R2 fastq files. It can be either the "trimmed" folder or the original folder.
#' @param genomeRef indicated which reference will be used. Write "HG38" or ...
#' @param fastQC_after_trim lfnrks
#' @param RunARRIBA kvsfj
#' @param RunFeatureCounts vshbfj
#' @param RunMIXCR kvsjhbfj
#' @return softwares that were runned and the time they took.
#' @export
RNAseqP <- function(patients_dir,
                    genomeRef = "HG38",
                    fastQC_after_trim = FALSE,
                    plot_FastQC_trim = FALSE,
                    trim_quality = 30,
                    RunARRIBA = FALSE,
                    RunFeatureCounts = TRUE,
                    RunMIXCR = FALSE
                    ) {

  #patients_dir <- "~/EnvironChile/Muestras"
  if (genomeRef == "HG38") {
    downloadHG38()
  }

  #Vectors that will be filled and show on a dataframe in the end of the function
  softwares_runned <- c()
  times_registered <- c()

  file_list <- list.dirs(path = patients_dir, full.names = FALSE, recursive = FALSE)

  #Functions applied to each patient one by one
  for (patient in file_list) {
    patient_dir <- sprintf("%s/%s", patients_dir, patient)
    #FASTQC
    FastQC_time <- system.time(runFastQC(patient_dir))
    softwares_runned <- c(softwares_runned, "FastQC")
    times_registered <- c(times_registered, FastQC_time[[3]])
    message(sprintf("The patient %s has already been processed with FastQC", patient))

    #TRIMGALORE
    #patient_dir <- "~/EnvironChile/Muestras/Co1099"
      #Returns trimmed folder inside patient's folder
    TrimGalore_time <- system.time({
      patient_dir_trim <- runTrimgalore(patient_dir, fastQC_after_trim = fastQC_after_trim, trim_quality = trim_quality)
    })
    times_registered <- c(times_registered, TrimGalore_time[[3]])
    softwares_runned <- c(softwares_runned, "TrimGalore")

    message(sprintf("The patient %s has already been processed with TrimGalore", patient))

    #FASTQC
    if (fastQC_after_trim == TRUE) {
      FastQC_trim_time <- system.time(runFastQC(patient_dir_trim))
      times_registered <- c(times_registered, FastQC_trim_time[[3]])
      softwares_runned <- c(softwares_runned, "FastQC after trim")
    }
    #patient_dir_trim <- "~/EnvironChile/Muestras/Co1109/trimmed"


    #MIXCR
    if(RunMIXCR == TRUE) {
      MIXCR_time <- system.time(runMIXCR(patient_dir_trim))
      times_registered <- c(times_registered, MIXCR_time[[3]])
      softwares_runned <- c(softwares_runned, "MIXCR")
      message(sprintf("The patient %s has already been processed with MIXCR", patient))
    }


    #STAR
    STAR_time <- system.time(runSTAR(patient_dir_trim))
    times_registered <- c(times_registered, STAR_time[[3]])
    softwares_runned <- c(softwares_runned, "STAR")
    message(sprintf("The patient %s has already been processed with STAR", patient))

    #ARRIBA
    if(RunARRIBA == TRUE) {
      ARRIBA_time <- system.time(runARRIBA(patient_dir_trim))
      times_registered <- c(times_registered, ARRIBA_time[[3]])
      softwares_runned <- c(softwares_runned, "ARRIBA")
      message(sprintf("The patient %s has already been processed with ARRIBA", patient))
    }

  }

  #Functions applied to all the patients together:
  PLOT_time <- system.time(plotFastQC_PBSQ(patients_dir, trimmed = FALSE))
  times_registered <- c(times_registered, PLOT_time[[3]])
  softwares_runned <- c(softwares_runned, "plot_PBSQ")
  message("The PBSQ plot has been generated!")


  #Aca hay algo que da error:
  if(plot_FastQC_trim == TRUE) {
    PLOT_trim_time <- system.time(plotFastQC_PBSQ(patients_dir, trimmed = TRUE))
    times_registered <- c(times_registered, PLOT_trim_time[[3]])
    message("The PBSQ plot has been generated with the trimmed fastqc!")
  }

  #FEATURE COUNTS
  if(RunFeatureCounts == TRUE) {
    #patients_dir <- "~/EnvironChile/Muestras"
    FC_time <- system.time({
      FC.object <- runFeatureCounts(patients_dir)
    })
    times_registered <- c(times_registered, FC_time)
    softwares_runned <- c(softwares_runned, "Feature_Counts")
    message("Feature Counts' analysis has finished!")
  }

  #TimeRegistration <- data.frame("Software" = softwares_runned, "Time" = times_registered)

  return(c(softwares_runned, times_registered))

}
