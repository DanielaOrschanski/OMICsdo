
#Control de calidad para reporte: ########################################################3
Counts_58faltantes <- readRDS("/media/16TBDisk/Daniela/Counts_58faltantes.rds")
Counts_58faltantes <- subset(Counts_58faltantes, select= -Co1517)
muestras58 <- colnames(Counts_58faltantes)
length(muestras58)

list_dirs <- list.dirs(recursive= FALSE, path = "/media/16TBDisk/Daniela/58MuestrasFaltantes", full.names = FALSE)

#Mover las carpetas de las 58 muestras ----
install.packages("ff")
library(ff)
dir_actual <- "/media/16TBDisk/Daniela/TodoMama"
dir_destino <-"/media/16TBDisk/Daniela/58MuestrasFaltantes/Mama"

# Iterar sobre cada nombre de carpeta y moverla
for (muestras in muestras58) {
  carpeta_origen <- paste(dir_actual,"/", muestras, sep="")
  carpeta_destino <- paste(dir_destino,"/", muestras, sep="")
  file.move(carpeta_origen, carpeta_destino)
}
library(OMICsdo)
runFastQC(patient_dir = "/media/16TBDisk/Daniela/MuestrasColon4/Co1525")

plotFastQC_PBSQ(patients_dir = "/media/16TBDisk/Daniela/58MuestrasFaltantes", trimmed = FALSE)
plotFastQC_PBSQ(patients_dir = "/media/16TBDisk/Daniela/58MuestrasFaltantes", trimmed = TRUE)

plotFastQC_PBSQ(patients_dir = "/media/16TBDisk/Daniela/58MuestrasFaltantes/Mama", trimmed = FALSE)
plotFastQC_PBSQ(patients_dir = "/media/16TBDisk/Daniela/58MuestrasFaltantes/Mama", trimmed = TRUE)

plotFastQC_PBSQ(patients_dir = "/media/16TBDisk/Daniela/MuestrasMama", trimmed = TRUE)
plotFastQC_PBSQ(patients_dir = "/media/16TBDisk/Daniela/MuestrasMama", trimmed = FALSE)


plotFastQC_PBSQ(patients_dir = "/media/16TBDisk/Daniela/MuestrasColon", trimmed = TRUE)
plotFastQC_PBSQ(patients_dir = "/media/16TBDisk/Daniela/MuestrasColon", trimmed = FALSE)


remove.packages("TestLibrary")

counts_Colon <- FeatureCount_Report$counts



BiocManager::install("qckitfastq")
library(qckitfastq)

patients_dir <- "/media/16TBDisk/Daniela/Biota/MuestrasLeo"

for (l in list_dir){
  runFastQC(l)
}

plotFastQC_PBSQ(patients_dir)

for (l in list_dir){
  runTrimgalore(l)
}


patients_dir <- "/media/16TBDisk/Daniela/58MuestrasFaltantes"
scores_qc <- calculate_qc_scores(patients_dir)
summary(scores_qc)

calculate_qc_scores <- function(patients_dir, trimmed = FALSE){

  scores_qc <- data.frame("Sample"= c(), "Q_Mean_R1" = c(), "%_>=Q30_R1"= c(),
                          "Q_Mean_R2" = c(), "%_>=Q30_R2"= c())
  i=1
  dir_list <- list.dirs(path = patients_dir, full.names = TRUE, recursive = FALSE)
  cant_patients <- length(dir_list)

  for (p in dir_list[1:31]) {
    #p <- dir_list[[i]]
    print(p)
    if  (trimmed == TRUE) {
      file_list <- list.files(sprintf("%s/trimmed/", p))
      gzip <- ifelse(length(nchar(file_list[endsWith(file_list, "val_1.fq.gz")])) == 0, "", ".gz")
      fileR1 <- paste0(p, "/trimmed/", file_list[endsWith(file_list, sprintf("val_1.fq%s", gzip))], sep="")
      fileR2 <- paste0(p, "/trimmed/", file_list[endsWith(file_list, sprintf("val_2.fq%s", gzip))], sep="")
    } else {
      file_list <- list.files(p)
      gzip <- ifelse(length(nchar(file_list[endsWith(file_list, "R1.fastq.gz")])) == 0, "", ".gz")
      fileR1 <- paste0(p, "/", file_list[endsWith(file_list, sprintf("R1.fastq%s", gzip))], sep="")
      fileR2 <- paste0(p, "/", file_list[endsWith(file_list, sprintf("R2.fastq%s", gzip))], sep="")
    }

    if ((length(nchar(fileR1)) == 0) | (length(nchar(fileR2)) == 0)) {
      stop("There are no fastq files in this directory")
    }

    QC <- qual_score_per_read(fileR1)
    mean <- mean(QC$mu_per_read)
    Q30 <- (sum(QC$mu_per_read>=30)/length(QC$mu_per_read))*100

    scores_qc[i, "Sample"] <- basename(p)
    scores_qc[i, "Q_Mean_R1"] <- mean
    scores_qc[i, "%_>=Q30_R1"] <- Q30

    #QC <- qual_score_per_read(fileR2)
    #mean <- mean(QC$mu_per_read)
    #Q30 <- (sum(QC$mu_per_read>=30)/length(QC$mu_per_read))*100

    scores_qc[i, "Q_Mean_R2"] <- mean
    scores_qc[i, "%_>=Q30_R2"] <- Q30

    i= i+1
  }
  saveRDS(scores_qc, file= sprintf("%s/scores_QC.rds", patients_dir))
  return(scores_qc)

}

scores_qc_mama <- scores_qc
summary(scores_qc)
#################################################################################################
#Unir counts del FC:
count_mama_guada <- readRDS("/media/16TBDisk/Daniela/MuestrasMamaGuada/FeatureCount_Report.rds")
count_mama_guada <- count_mama_guada$counts
count_mama <- readRDS("/media/16TBDisk/Daniela/MuestrasMama/FeatureCount_Report.rds")
count_mama <- count_mama$counts
count_colon <- readRDS("/media/16TBDisk/Daniela/MuestrasColon/FeatureCount_Report_12Muestras.rds")
count_colon <- count_colon$counts
count_colon2 <- readRDS("/media/16TBDisk/Daniela/MuestrasColon2/FeatureCount_Report.rds")
count_colon2 <- count_colon2$counts
count_colon3 <- readRDS("/media/16TBDisk/Daniela/MuestrasColon3/FeatureCount_Report.rds")
count_colon3 <- count_colon3$counts
count_colon4 <- readRDS("/media/16TBDisk/Daniela/MuestrasColon4/FeatureCount_Report.rds")
count_colon4 <- count_colon4$counts
count_colon_guada <- readRDS("/media/16TBDisk/Daniela/MuestrasColonGuada/FeatureCount_Report.rds")
count_colon_guada <- count_colon_guada$counts

Todos_counts <- cbind(count_mama_guada, count_colon_guada, count_mama,
                      count_colon, count_colon2, count_colon3, count_colon4)

saveRDS(Todos_counts, file= "/media/16TBDisk/Daniela/Counts_91.rds")


#################################
# Comparacion de calidad
################################
BiocManager::install("qckitfastq")
library(qckitfastq)
library(readr)
library(stringr)

#Run FastQC
runFastQC(patient_dir = "/media/16TBDisk/Daniela/MuestrasColonGuada")

infile <- "/media/16TBDisk/Daniela/MuestrasColonGuada/Co0173/Co0173_combined_R1.fastq.gz"
QC <- qual_score_per_read(infile)
qual_score_per_read(infile)$q50_per_position[1:10]


#Calcular el mean manualmente:
patient_dir <- "~/Biota/MuestrasLeo/80"
PBSQ_Colombia <- ModuloPBSQ(patient_dir)
mean(PBSQ_Colombia$Mean)

#Recorro cada paciente para guardar las tablas para el grafico y sacar el promedio de las medias.
ModuloPBSQ <- function(patient_dir, trimmed= FALSE) {

  if (trimmed == FALSE) {
    file_list <- list.files(patient_dir)
    dir_fastqc_R1 <- paste0(patient_dir, "/", file_list[endsWith(file_list, "R1_001_fastqc")], sep="")
    dir_fastqc_R2 <- paste0(patient_dir, "/", file_list[endsWith(file_list, "R2_001_fastqc")], sep="")

  } else {
    file_list <- list.files(patient_dir)
    dir_fastqc_R1 <- paste0(patient_dir, "/", file_list[endsWith(file_list, "val_1_fastqc")], sep="")
    dir_fastqc_R2 <- paste0(patient_dir, "/", file_list[endsWith(file_list, "val_2_fastqc")], sep="")
  }

  if( length(nchar(dir_fastqc_R1)) == 0 | length(nchar(dir_fastqc_R2)) == 0 ) {
    stop("There is no fastQC file in this folder. Try trimmed == FALSE.")
  }
  print(basename(dir_fastqc_R1))

  report_R1 <- read_file(paste0(dir_fastqc_R1, "/fastqc_data.txt", sep=""))
  module_R1 <- str_split(report_R1, ">>")


  print(basename(dir_fastqc_R2))
  report_R2 <- read_file(paste0(dir_fastqc_R2, "/fastqc_data.txt", sep=""))
  module_R2 <- str_split(report_R2, ">>")

  #Plot principal:
  Per_base_sequence_quality_R1 <- create_FQCdata(module_R1[[1]][4])
  order_fact <- Per_base_sequence_quality_R1$Base
  Per_base_sequence_quality_R1$Base <- factor(Per_base_sequence_quality_R1$Base, levels = order_fact)

  Per_base_sequence_quality_R2 <- create_FQCdata(module_R2[[1]][4])
  order_fact <- Per_base_sequence_quality_R2$Base
  Per_base_sequence_quality_R2$Base <- factor(Per_base_sequence_quality_R2$Base, levels = order_fact)

  #promedio la mean de R1 y R2 para poder tener una sola lÃ­nea por cada paciente
  Per_base_sequence_quality <- Per_base_sequence_quality_R1
  Per_base_sequence_quality$Mean <- ((Per_base_sequence_quality_R1$Mean + Per_base_sequence_quality_R2$Mean) / 2)

  message(sprintf("The module of patient %s for PBSQ graph has been loaded", patient_dir))
  return(Per_base_sequence_quality)
}

mean(Per_base_sequence_quality$Mean)



#' @title create FastQC data
#' @description Prepare the data for plotting
#' @param dat data from module of FastQC output
create_FQCdata <- function(dat) {
  DBname <- read_lines(dat)
  len <- length(DBname)
  DBname <- DBname[2:len]
  DBname <- read.table(text = DBname, sep = "\t")
  colnames(DBname) <- strsplit(read_lines(dat)[2],"\t", fixed=TRUE)[[1]]
  colnames(DBname)[1] <- str_replace(colnames(DBname)[1], "#", "")
  return(DBname)
}
